@namespace Savanna.Web.Components.Game
@using Savanna.Core
@using Savanna.Core.Constants
@using Savanna.Domain.Interfaces
@using Savanna.Core.Interfaces

<div class="game-field-container">
    <div class="game-field" id="gameField">
        @if (GameEngine != null)
        {
            @foreach (var animal in GameEngine.Animals)
            {
                string animalClass = GetAnimalClass(animal.Name);
                string animalDisplay = GetAnimalDisplay(animal.Name);
                bool isSelected = animal.IsSelected;

                <div class="animal @animalClass @(isSelected ? "selected" : "")" @key="animal.GetHashCode()"
                    @onclick="() => OnSelectAnimal.InvokeAsync(animal)"
                    style="left: @(animal.Position.X * 100 / FieldWidth)%; top: @(animal.Position.Y * 100 / FieldHeight)%; width: @(100 / FieldWidth)%; height: @(100 / FieldHeight)%;">
                    @if (UseLetterDisplay)
                    {
                        @(animal.Name.Substring(0, 1))
                    }
                    else
                    {
                        @animalDisplay
                    }
                </div>
            }
        }
    </div>
</div>

<style>
    .game-field-container {
        background-color: #f8f0e3;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 0.5rem;
        overflow: auto;
        min-height: 0;
        max-height: none;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        flex: 1;
    }

    .game-field {
        position: relative;
        border: 2px solid #5d4037;
        border-radius: var(--border-radius);
        background-color: #8ba446;
        background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239e9764' fill-opacity='0.25'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        width: 100% !important;
        height: 100% !important;
        max-width: none;
        max-height: none;
        margin: 0;
    }

    .animal {
        position: absolute;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease-out;
        z-index: 1;
    }

    .animal.selected {
        box-shadow: 0 0 0 2px #fff, 0 0 0 3px #e07b39;
        z-index: 10;
        transform: scale(1.1);
    }

    .lion {
        color: #ff4136;
        text-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    }

    .antelope {
        color: #3d9970;
        text-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    }
</style>

@code {
    [Parameter]
    public GameEngine GameEngine { get; set; }

    [Parameter]
    public int FieldWidth { get; set; }

    [Parameter]
    public int FieldHeight { get; set; }

    [Parameter]
    public bool UseLetterDisplay { get; set; }

    [Parameter]
    public EventCallback<IAnimal> OnSelectAnimal { get; set; }

    private string GetAnimalClass(string animalName)
    {
        return animalName.ToLower();
    }

    private string GetAnimalDisplay(string animalName)
    {
        return animalName switch
        {
            GameConstants.LionName => GameConstants.LionSymbol,
            GameConstants.AntelopeName => GameConstants.AntelopeSymbol,
            GameConstants.CaracalName => GameConstants.CaracalSymbol,
            _ => GameConstants.UnknownAnimalSymbol
        };
    }
}