@using Microsoft.AspNetCore.Identity
@using Savanna.Web.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Savanna.Web.Constants

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime

<div class="nav-item">
    <AuthorizeView>
        <Authorized>
            <span class="nav-link me-1">
                @string.Format(WebConstants.HelloUserText, context.User.Identity?.Name)
                @if (_userRoles != null && _userRoles.Any())
                {
                    <span class="badge bg-primary ms-1">@string.Join(", ", _userRoles)</span>
                }
            </span>
            <a class="nav-link" href="/Account/Manage">Account</a>
            @if (_userRoles != null && _userRoles.Contains(WebConstants.AdminRoleName))
            {
                <a class="nav-link" href="/Admin/Dashboard">Admin Dashboard</a>
            }
            <a class="nav-link btn btn-outline-danger btn-sm" href="/Account/Logout">
                <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
            </a>
        </Authorized>
        <NotAuthorized>
            <a class="nav-link" href="/Account/Register">Register</a>
            <a class="nav-link" href="/Account/Login">Login</a>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private IList<string>? _userRoles;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState != null)
        {
            var authState = await AuthState;
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var appUser = await UserManager.GetUserAsync(user);
                if (appUser != null)
                {
                    _userRoles = await UserManager.GetRolesAsync(appUser);
                }
            }
        }

        await base.OnInitializedAsync();
    }
}