@using Microsoft.AspNetCore.Identity
@using Savanna.Web.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Savanna.Web.Constants
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager Navigation

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        <div class="user-menu">
            <div class="user-menu-button">
                <i class="bi bi-person-circle me-2"></i>
                @context.User.Identity?.Name
                <i class="bi bi-chevron-down ms-2"></i>
            </div>
            <div class="user-menu-dropdown">
                <a href="/Account/Manage" class="dropdown-item">
                    <i class="bi bi-person-gear me-2"></i>Profile
                </a>
                @if (_userRoles?.Contains(WebConstants.AdminRoleName) == true)
                {
                    <a href="/Admin/Dashboard" class="dropdown-item">
                        <i class="bi bi-speedometer2 me-2"></i>Admin
                    </a>
                }
                <a href="/Account/Logout" class="dropdown-item logout-button">
                    <i class="bi bi-box-arrow-right me-2"></i>Log out
                </a>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="auth-links">
            <a href="/Account/Register">Register</a>
            <a href="/Account/Login">Log in</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

<style>
    .user-menu {
        position: relative;
        display: inline-block;
    }

    .user-menu-button {
        cursor: pointer;
        padding: 0.5rem 1rem;
        display: flex;
        align-items: center;
        border-radius: var(--border-radius);
        transition: background-color var(--transition-speed);
    }

    .user-menu-button:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }

    .user-menu:hover .user-menu-dropdown {
        display: block;
    }

    .user-menu-dropdown {
        display: none;
        position: absolute;
        right: 0;
        top: 100%;
        min-width: 200px;
        background-color: var(--panel-bg);
        border-radius: var(--border-radius);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        overflow: hidden;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        color: var(--primary-text);
        text-decoration: none;
        transition: background-color var(--transition-speed);
    }

    .dropdown-item:hover {
        background-color: rgba(0, 0, 0, 0.05);
        text-decoration: none;
    }

    .logout-button {
        width: 100%;
        text-align: left;
        background: none;
        border: none;
        color: var(--danger);
        cursor: pointer;
        font-size: 1rem;
    }

    .auth-links {
        display: flex;
        gap: 1.5rem;
    }

    .auth-links a {
        color: var(--primary-text);
        text-decoration: none;
        transition: color var(--transition-speed);
    }

    .auth-links a:hover {
        color: var(--savanna-accent);
        text-decoration: none;
    }
</style>

@code {
    private List<string>? _userRoles;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            _userRoles = user.Claims
            .Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
            .Select(c => c.Value)
            .ToList();
        }
    }

    private async Task LogoutUser()
    {
        await SignInManager.SignOutAsync();
        Navigation.NavigateTo("/", true);
    }
}