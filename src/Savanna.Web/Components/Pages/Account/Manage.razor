@page "/Account/Manage"
@using Microsoft.AspNetCore.Identity
@using Savanna.Web.Models
@using Microsoft.AspNetCore.Authorization
@using Savanna.Web.Constants
@attribute [Authorize]
@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Account Management</PageTitle>

<div class="savanna-container">
    <h1>Account Management</h1>
    <p class="lead">Manage your account settings and profile information</p>

    @if (_user == null)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-3">
                <div class="savanna-nav-menu mb-4">
                    <button class="savanna-nav-item @(_activeTab == "profile" ? "active" : "")"
                        @onclick='() => ActivateTab("profile")'>
                        <i class="bi bi-person me-2"></i> Profile
                    </button>
                    <button class="savanna-nav-item @(_activeTab == "password" ? "active" : "")"
                        @onclick='() => ActivateTab("password")'>
                        <i class="bi bi-key me-2"></i> Password
                    </button>
                    <button class="savanna-nav-item @(_activeTab == "email" ? "active" : "")"
                        @onclick='() => ActivateTab("email")'>
                        <i class="bi bi-envelope me-2"></i> Email
                    </button>
                </div>
            </div>

            <div class="col-md-9">
                <div class="savanna-card">
                    <div class="savanna-card-header">
                        <h3 class="card-title mb-0">
                            @if (_activeTab == "profile")
                            {
                                <span><i class="bi bi-person me-2"></i> Profile</span>
                            }
                            else if (_activeTab == "password")
                            {
                                <span><i class="bi bi-key me-2"></i> Password</span>
                            }
                            else if (_activeTab == "email")
                            {
                                <span><i class="bi bi-envelope me-2"></i> Email</span>
                            }
                        </h3>
                    </div>
                    <div class="savanna-card-body">
                        @if (!string.IsNullOrEmpty(_statusMessage))
                        {
                            <div class="savanna-alert @_statusClass" role="alert">
                                @_statusMessage
                                <button type="button" class="savanna-alert-close" @onclick="ClearStatusMessage">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                        }

                        @if (_activeTab == "profile")
                        {
                            <div class="mb-3">
                                <label class="form-label">User ID</label>
                                <input type="text" class="form-control" value="@_user.Id" disabled />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Username</label>
                                <input type="text" class="form-control" @bind="_username" />
                            </div>
                            <button class="btn-savanna btn-primary" @onclick="UpdateProfileAsync">
                                <i class="bi bi-save me-1"></i> Save Changes
                            </button>
                        }
                        else if (_activeTab == "password")
                        {
                            <div class="mb-3">
                                <label class="form-label">Current Password</label>
                                <input type="password" class="form-control" @bind="_currentPassword" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">New Password</label>
                                <input type="password" class="form-control" @bind="_newPassword" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Confirm New Password</label>
                                <input type="password" class="form-control" @bind="_confirmPassword" />
                            </div>
                            <button class="btn-savanna btn-primary" @onclick="ChangePasswordAsync">
                                <i class="bi bi-key me-1"></i> Change Password
                            </button>
                        }
                        else if (_activeTab == "email")
                        {
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" @bind="_email" />
                            </div>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="_emailConfirmed" disabled />
                                    <label class="form-check-label">
                                        Email Confirmed
                                    </label>
                                </div>
                            </div>
                            <button class="btn-savanna btn-primary" @onclick="UpdateEmailAsync">
                                <i class="bi bi-envelope me-1"></i> Update Email
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .savanna-container {
        background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239e9764' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E"),
            linear-gradient(135deg, var(--savanna-sand) 0%, var(--secondary-bg) 100%);
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 2rem;
        margin: 2rem auto;
        position: relative;
        overflow: hidden;
    }

    .savanna-container::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(to right, var(--savanna-accent), var(--savanna-grass), var(--savanna-accent));
    }

    .savanna-container h1 {
        text-align: center;
        margin-bottom: 1rem;
        margin-top: 1rem;
        color: var(--savanna-earth);
        font-weight: 700;
        font-size: 2.2rem;
    }

    .savanna-container .lead {
        text-align: center;
        color: var(--secondary-text);
        margin-bottom: 2rem;
    }

    .savanna-nav-menu {
        background-color: var(--panel-bg);
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .savanna-nav-item {
        display: block;
        width: 100%;
        padding: 0.75rem 1rem;
        text-align: left;
        background: none;
        border: none;
        border-bottom: 1px solid var(--savanna-sand-light);
        color: var(--primary-text);
        transition: all var(--transition-speed);
        cursor: pointer;
    }

    .savanna-nav-item:last-child {
        border-bottom: none;
    }

    .savanna-nav-item:hover {
        background-color: rgba(194, 112, 61, 0.05);
    }

    .savanna-nav-item.active {
        background-color: var(--savanna-accent);
        color: white;
        font-weight: 500;
    }

    .savanna-card {
        background-color: var(--panel-bg);
        border-radius: var(--border-radius);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .savanna-card-header {
        background-color: var(--savanna-sand);
        color: var(--savanna-earth);
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--savanna-sand-light);
    }

    .savanna-card-body {
        padding: 1.5rem;
    }

    .savanna-alert {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.75rem 1rem;
        border-radius: var(--border-radius);
        margin-bottom: 1.5rem;
    }

    .savanna-alert.alert-success {
        background-color: rgba(25, 135, 84, 0.1);
        color: #146c43;
        border-left: 4px solid #146c43;
    }

    .savanna-alert.alert-danger {
        background-color: rgba(220, 53, 69, 0.1);
        color: #b02a37;
        border-left: 4px solid #b02a37;
    }

    .savanna-alert.alert-info {
        background-color: rgba(13, 110, 253, 0.1);
        color: #0a58ca;
        border-left: 4px solid #0a58ca;
    }

    .savanna-alert-close {
        background: transparent;
        border: none;
        cursor: pointer;
        padding: 0;
        font-size: 1.25rem;
        line-height: 1;
    }

    .btn-savanna {
        display: inline-flex;
        align-items: center;
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        font-weight: 500;
        border-radius: var(--border-radius);
        cursor: pointer;
        transition: all var(--transition-speed);
        border: none;
    }

    .btn-primary {
        background-color: var(--savanna-accent);
        color: white;
    }

    .btn-primary:hover {
        background-color: var(--savanna-accent-dark, #b85c36);
    }
</style>

@code {
    private ApplicationUser? _user;
    private string _activeTab = "profile";
    private string _statusMessage = "";
    private string _statusClass = "alert-info";

    private string _username = "";

    private string _currentPassword = "";
    private string _newPassword = "";
    private string _confirmPassword = "";

    private string _email = "";
    private bool _emailConfirmed = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDataAsync();
    }

    private async Task LoadUserDataAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            _user = await UserManager.GetUserAsync(user);
            if (_user != null)
            {
                _username = _user.UserName ?? "";
                _email = _user.Email ?? "";
                _emailConfirmed = _user.EmailConfirmed;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login");
        }
    }

    private void ActivateTab(string tabName)
    {
        _activeTab = tabName;
        ClearStatusMessage();
    }

    private void ClearStatusMessage()
    {
        _statusMessage = "";
    }

    private async Task UpdateProfileAsync()
    {
        if (_user == null) return;

        if (string.IsNullOrWhiteSpace(_username))
        {
            _statusMessage = "Username cannot be empty.";
            _statusClass = "alert-danger";
            return;
        }

        _user.UserName = _username;
        var result = await UserManager.UpdateAsync(_user);

        if (result.Succeeded)
        {
            _statusMessage = WebConstants.ProfileUpdatedSuccessMessage;
            _statusClass = "alert-success";
        }
        else
        {
            _statusMessage = string.Format(WebConstants.ErrorUpdatingProfileMessage,
            string.Join(", ", result.Errors.Select(e => e.Description)));
            _statusClass = "alert-danger";
        }
    }

    private async Task ChangePasswordAsync()
    {
        if (_user == null) return;

        if (string.IsNullOrWhiteSpace(_currentPassword) ||
        string.IsNullOrWhiteSpace(_newPassword) ||
        string.IsNullOrWhiteSpace(_confirmPassword))
        {
            _statusMessage = WebConstants.AllPasswordFieldsRequiredMessage;
            _statusClass = "alert-danger";
            return;
        }

        if (_newPassword != _confirmPassword)
        {
            _statusMessage = WebConstants.PasswordMismatchNewConfirmMessage;
            _statusClass = "alert-danger";
            return;
        }

        var result = await UserManager.ChangePasswordAsync(_user, _currentPassword, _newPassword);

        if (result.Succeeded)
        {
            _statusMessage = WebConstants.PasswordChangedSuccessMessage;
            _statusClass = "alert-success";
            _currentPassword = "";
            _newPassword = "";
            _confirmPassword = "";
        }
        else
        {
            _statusMessage = string.Format(WebConstants.ErrorChangingPasswordMessage,
            string.Join(", ", result.Errors.Select(e => e.Description)));
            _statusClass = "alert-danger";
        }
    }

    private async Task UpdateEmailAsync()
    {
        if (_user == null) return;

        if (string.IsNullOrWhiteSpace(_email))
        {
            _statusMessage = WebConstants.EmailCannotBeEmptyMessage;
            _statusClass = "alert-danger";
            return;
        }

        if (_email == _user.Email)
        {
            _statusMessage = WebConstants.EmailSameAsCurrentMessage;
            _statusClass = "alert-info";
            return;
        }

        var token = await UserManager.GenerateChangeEmailTokenAsync(_user, _email);
        var result = await UserManager.ChangeEmailAsync(_user, _email, token);

        if (result.Succeeded)
        {
            _statusMessage = WebConstants.EmailUpdatedSuccessMessage;
            _statusClass = "alert-success";
            await LoadUserDataAsync(); // Reload data to update email confirmed status
        }
        else
        {
            _statusMessage = string.Format(WebConstants.ErrorUpdatingEmailMessage,
            string.Join(", ", result.Errors.Select(e => e.Description)));
            _statusClass = "alert-danger";
        }
    }
}