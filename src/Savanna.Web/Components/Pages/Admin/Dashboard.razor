@page "/Admin/Dashboard"
@using Microsoft.AspNetCore.Identity
@using Savanna.Web.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager NavigationManager

<PageTitle>Admin Dashboard</PageTitle>

<div class="savanna-container">
    <h1>Admin Dashboard</h1>
    <p class="lead">Manage registered users and their roles</p>

    <div class="savanna-card">
        <div class="savanna-card-header">
            <h3 class="card-title mb-0">User Management</h3>
        </div>
        <div class="savanna-card-body">
            <div class="table-responsive">
                @if (_users == null)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!_users.Any())
                {
                    <div class="savanna-alert alert-info">
                        <i class="bi bi-info-circle me-2"></i> No users found in the system.
                    </div>
                }
                else
                {
                    <table class="savanna-table">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Roles</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in _users)
                            {
                                <tr>
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>
                                        @if (_userRoles.ContainsKey(user.Id))
                                        {
                                            @foreach (var role in _userRoles[user.Id])
                                            {
                                                <span class="role-badge">@role</span>
                                            }
                                        }
                                    </td>
                                    <td>
                                        <button class="btn-savanna btn-primary" @onclick="() => ShowUserDetails(user.Id)">
                                            <i class="bi bi-info-circle me-1"></i> Details
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .savanna-container {
        background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239e9764' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E"),
            linear-gradient(135deg, var(--savanna-sand) 0%, var(--secondary-bg) 100%);
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 2rem;
        margin: 2rem auto;
        position: relative;
        overflow: hidden;
    }

    .savanna-container::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(to right, var(--savanna-accent), var(--savanna-grass), var(--savanna-accent));
    }

    .savanna-container h1 {
        text-align: center;
        margin-bottom: 1rem;
        margin-top: 1rem;
        color: var(--savanna-earth);
        font-weight: 700;
        font-size: 2.2rem;
    }

    .savanna-container .lead {
        text-align: center;
        color: var(--secondary-text);
        margin-bottom: 2rem;
    }

    .savanna-card {
        background-color: var(--panel-bg);
        border-radius: var(--border-radius);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .savanna-card-header {
        background-color: var(--savanna-sand);
        color: var(--savanna-earth);
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--savanna-sand-light);
    }

    .savanna-card-body {
        padding: 1.5rem;
    }

    .savanna-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background-color: rgba(255, 253, 245, 0.7);
        border-radius: var(--border-radius);
        overflow: hidden;
    }

    .savanna-table th {
        background-color: var(--savanna-sand);
        color: var(--savanna-earth);
        font-weight: 600;
        padding: 0.75rem 1rem;
        text-align: left;
        border-bottom: 2px solid var(--savanna-accent);
    }

    .savanna-table td {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid var(--savanna-sand);
        vertical-align: middle;
    }

    .savanna-table tr:nth-child(even) {
        background-color: rgba(246, 240, 227, 0.7);
    }

    .savanna-table tr:nth-child(odd) {
        background-color: rgba(254, 250, 240, 0.7);
    }

    .savanna-table tr:hover {
        background-color: rgba(194, 112, 61, 0.1);
    }

    .role-badge {
        display: inline-block;
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 600;
        background-color: rgba(194, 112, 61, 0.2);
        color: var(--savanna-accent-dark, #b85c36);
        border-radius: 0.25rem;
        text-align: center;
        white-space: nowrap;
        margin-right: 0.5rem;
    }

    .savanna-alert {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        border-radius: var(--border-radius);
        margin-bottom: 1.5rem;
    }

    .savanna-alert.alert-info {
        background-color: rgba(13, 110, 253, 0.1);
        color: #0a58ca;
        border-left: 4px solid #0a58ca;
    }

    .btn-savanna {
        display: inline-flex;
        align-items: center;
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        font-weight: 500;
        border-radius: var(--border-radius);
        cursor: pointer;
        transition: all var(--transition-speed);
        border: none;
    }

    .btn-primary {
        background-color: var(--savanna-accent);
        color: white;
    }

    .btn-primary:hover {
        background-color: var(--savanna-accent-dark, #b85c36);
    }
</style>

@code {
    private List<ApplicationUser>? _users;
    private Dictionary<string, List<string>> _userRoles = new();
    private string? _selectedUserId;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        _users = UserManager.Users.ToList();
        _userRoles.Clear();

        foreach (var user in _users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            _userRoles[user.Id] = roles.ToList();
        }
    }

    private void ShowUserDetails(string userId)
    {
        NavigationManager.NavigateTo($"/Admin/UserDetails/{userId}");
    }
}