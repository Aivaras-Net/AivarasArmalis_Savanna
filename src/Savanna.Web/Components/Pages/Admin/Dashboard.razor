@page "/Admin/Dashboard"
@using Microsoft.AspNetCore.Identity
@using Savanna.Web.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager NavigationManager

<PageTitle>Admin Dashboard</PageTitle>

<div class="container mt-4">
    <h1>Admin Dashboard</h1>
    <p class="lead">Manage registered users and their roles</p>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0">User Management</h3>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                @if (_users == null)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!_users.Any())
                {
                    <div class="alert alert-info">
                        No users found in the system.
                    </div>
                }
                else
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Email Confirmed</th>
                                <th>Roles</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in _users)
                            {
                                <tr>
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>
                                        @if (user.EmailConfirmed)
                                        {
                                            <span class="badge bg-success">Confirmed</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">Not Confirmed</span>
                                        }
                                    </td>
                                    <td>
                                        @if (_userRoles.ContainsKey(user.Id))
                                        {
                                            @foreach (var role in _userRoles[user.Id])
                                            {
                                                <span class="badge bg-primary me-1">@role</span>
                                            }
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-outline-primary"
                                                @onclick="() => ShowUserDetails(user.Id)">
                                                <i class="bi bi-info-circle"></i> Details
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<ApplicationUser>? _users;
    private Dictionary<string, List<string>> _userRoles = new();
    private string? _selectedUserId;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        _users = UserManager.Users.ToList();
        _userRoles.Clear();

        foreach (var user in _users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            _userRoles[user.Id] = roles.ToList();
        }
    }

    private void ShowUserDetails(string userId)
    {
        NavigationManager.NavigateTo($"/Admin/UserDetails/{userId}");
    }
}