@page "/animal-info"
@using Savanna.Web.Services.Interfaces
@using Savanna.Web.Constants
@using Savanna.Domain.Interfaces
@using Savanna.Web.Services
@using System.Reflection
@using System.Text.Json
@using Savanna.Core.Constants
@using Microsoft.AspNetCore.Components.Web
@using Savanna.Core.Config

@inject IPluginService PluginService
@inject IGameService GameService
@inject ILogger<AnimalInformation> Logger
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Animal Information</PageTitle>

<div class="savanna-container">
    <h1>Animal Information</h1>

    <div class="table-responsive">
        <table class="savanna-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Source</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Lion</td>
                    <td><span class="animal-badge predator">Predator</span></td>
                    <td>Savanna.Core</td>
                    <td>
                        <button type="button" class="btn-savanna btn-primary"
                            @onclick="() => ViewDefaultAnimalDetails(GameConstants.LionName)">
                            <i class="bi bi-info-circle me-1"></i> Details
                        </button>
                    </td>
                </tr>
                <tr>
                    <td>Antelope</td>
                    <td><span class="animal-badge prey">Prey</span></td>
                    <td>Savanna.Core</td>
                    <td>
                        <button type="button" class="btn-savanna btn-primary"
                            @onclick="() => ViewDefaultAnimalDetails(GameConstants.AntelopeName)">
                            <i class="bi bi-info-circle me-1"></i> Details
                        </button>
                    </td>
                </tr>

                @foreach (var animalName in _availableAnimals)
                {
                    var info = PluginService.GetPluginAnimalInfo(animalName);
                    <tr>
                        <td>@info.Name</td>
                        <td>
                            @if (info.IsPredator)
                            {
                                <span class="animal-badge predator">Predator</span>
                            }
                            else if (info.IsPrey)
                            {
                                <span class="animal-badge prey">Prey</span>
                            }
                            else
                            {
                                <span class="animal-badge neutral">Unknown</span>
                            }
                        </td>
                        <td>@info.SourceAssembly</td>
                        <td>
                            <button type="button" class="btn-savanna btn-primary"
                                @onclick="() => ViewAnimalDetails(animalName)">
                                <i class="bi bi-info-circle me-1"></i> Details
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (_showAnimalDetailsModal)
{
    <div class="savanna-modal-overlay">
        <div class="savanna-modal">
            <div class="savanna-modal-content">
                <div class="savanna-modal-header">
                    <h5 class="savanna-modal-title">@_selectedAnimal?.Name Details</h5>
                    <button type="button" class="savanna-modal-close" @onclick="CloseModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="savanna-modal-body">
                    <div class="code-container">
                        <div class="code-header">JSON Representation</div>
                        <pre class="code-content"><code>@_selectedAnimalJson</code></pre>
                    </div>
                </div>
                <div class="savanna-modal-footer">
                    <button type="button" class="btn-savanna btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(_statusMessage))
{
    <div class="savanna-toast-container">
        <div class="savanna-toast @_statusMessageClass">
            <div class="savanna-toast-header">
                <strong>@_statusMessageTitle</strong>
                <button type="button" class="savanna-toast-close" @onclick="() => _statusMessage = null">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="savanna-toast-body">
                @_statusMessage
            </div>
        </div>
    </div>
}

<style>
    .savanna-container {
        margin: 2rem auto;
    }

    .savanna-table {
    }

    .savanna-table th {
    }

    .savanna-table td {
    }

    .animal-badge {
        display: inline-block;
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 600;
        border-radius: 0.25rem;
        text-align: center;
        white-space: nowrap;
        line-height: 1;
    }

    .animal-badge.predator {
        background-color: rgba(220, 53, 69, 0.1);
        color: #b02a37;
    }

    .animal-badge.prey {
        background-color: rgba(25, 135, 84, 0.1);
        color: #146c43;
    }

    .animal-badge.neutral {
        background-color: rgba(108, 117, 125, 0.1);
        color: #495057;
    }

    .code-container {
        background-color: var(--code-bg, #f8f9fa);
        border: 1px solid var(--border-color, #dee2e6);
        border-radius: var(--border-radius);
        margin-top: 1rem;
        overflow: hidden;
    }

    .code-header {
        padding: 0.5rem 1rem;
        background-color: var(--savanna-sand-light);
        color: var(--savanna-earth);
        font-weight: 500;
        border-bottom: 1px solid var(--border-color, #dee2e6);
    }

    .code-content {
        padding: 1rem;
        max-height: 300px;
        overflow-y: auto;
        font-family: var(--font-family-monospace);
        font-size: 0.875em;
        background-color: var(--code-content-bg, #fff);
        color: var(--code-content-text, #212529);
    }
</style>

@code {
    private List<string> _availableAnimals = new();
    private PluginAnimalInfo? _selectedAnimal;
    private string _selectedAnimalJson = "{}";
    private string? _statusMessage;
    private string _statusMessageClass = "";
    private string _statusMessageTitle = "";
    private bool _showAnimalDetailsModal = false;
    private string? _selectedDefaultAnimal;

    protected override void OnInitialized()
    {
        try
        {
            _availableAnimals = PluginService.GetAvailablePluginAnimals().ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading plugin animals");
            _statusMessage = $"Error loading plugin animals: {ex.Message}";
            _statusMessageClass = "bg-danger text-white";
            _statusMessageTitle = "Error";
        }
    }

    private void ViewAnimalDetails(string animalName)
    {
        try
        {
            _selectedAnimal = PluginService.GetPluginAnimalInfo(animalName);
            _selectedAnimalJson = JsonSerializer.Serialize(_selectedAnimal, new JsonSerializerOptions { WriteIndented = true });
            _showAnimalDetailsModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading animal details for {AnimalName}", animalName);
            _statusMessage = $"Error loading animal details: {ex.Message}";
            _statusMessageClass = "bg-danger text-white";
            _statusMessageTitle = "Error";
        }
    }

    private void ViewDefaultAnimalDetails(string animalName)
    {
        try
        {
            _selectedDefaultAnimal = animalName;
            _selectedAnimal = GetDefaultAnimalInfo(animalName);
            _selectedAnimalJson = JsonSerializer.Serialize(_selectedAnimal, new JsonSerializerOptions { WriteIndented = true });
            _showAnimalDetailsModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading default animal details for {AnimalName}", animalName);
            _statusMessage = $"Error loading animal details: {ex.Message}";
            _statusMessageClass = "bg-danger text-white";
            _statusMessageTitle = "Error";
        }
    }

    private PluginAnimalInfo GetDefaultAnimalInfo(string animalName)
    {
        var animalConfig = ConfigurationService.GetAnimalConfig(animalName);

        var defaultAnimalInfo = new PluginAnimalInfo
        {
            Name = animalName,
            AnimalType = animalName,
            SourceAssembly = "Savanna.Core",
            IsPredator = animalConfig.Predator != null,
            IsPrey = animalConfig.Prey != null,
            Speed = animalConfig.Speed,
            VisionRange = animalConfig.VisionRange,
            SpecialActionChance = animalConfig.SpecialActionChance
        };

        if (animalConfig.Predator != null)
        {
            defaultAnimalInfo.HuntingRange = animalConfig.Predator.HuntingRange;
            defaultAnimalInfo.HealthGainFromKill = animalConfig.Predator.HealthGainFromKill;

            if (animalConfig.Predator.RoarRange > 0)
            {
                defaultAnimalInfo.RoarRange = animalConfig.Predator.RoarRange;
            }
        }

        if (animalConfig.Prey != null)
        {
            defaultAnimalInfo.HealthFromGrazing = animalConfig.Prey.HealthFromGrazing;
        }

        return defaultAnimalInfo;
    }

    private void CloseModal()
    {
        _showAnimalDetailsModal = false;
        _selectedAnimal = null;
        _selectedDefaultAnimal = null;
        StateHasChanged();
    }
}