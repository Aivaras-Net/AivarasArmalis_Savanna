@page "/game"
@using Savanna.Core
@using Savanna.Domain
@using Savanna.Domain.Interfaces
@using Savanna.Core.Constants
@using Savanna.Web.Constants
@using System.Timers
@using Microsoft.JSInterop
@using Microsoft.JSInterop.Infrastructure
@using Savanna.Core.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Savanna.Web.Services.Interfaces
@using Savanna.Web.Models
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IGameService GameService
@inject IGameRenderer GameRenderer
@inject IGameSaveService GameSaveService
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Savanna Game</PageTitle>

<div class="game-container mb-4">
    <h1>Savanna Game</h1>

    @if (!GameService.IsGameRunning)
    {
        <div class="game-menu">
            <button class="btn btn-primary" @onclick="StartNewGame">@WebConstants.StartNewGameButtonText</button>
        </div>
    }
    else
    {
        <div class="game-controls mb-3">
            <button class="btn btn-warning me-2" @onclick="TogglePause">
                @(GameService.IsPaused? WebConstants.ResumeButtonText: WebConstants.PauseButtonText)
            </button>
            <button class="btn btn-danger me-2" @onclick="StopGame">
                @WebConstants.StopGameButtonText
            </button>
            <div class="btn-group me-2">
                <button class="btn btn-success" @onclick="SpawnAntelope">@WebConstants.SpawnAntelopeButtonText</button>
                <button class="btn btn-danger" @onclick="SpawnLion">@WebConstants.SpawnLionButtonText</button>
            </div>
            <button class="btn btn-info me-2" @onclick="ToggleDisplayMode">
                @(GameService.UseLetterDisplay? WebConstants.ShowIconsButtonText: WebConstants.ShowLettersButtonText)
            </button>
            <button class="btn btn-secondary me-2" @onclick="ToggleSavePanel">
                <i class="bi bi-save"></i> Save Game
            </button>
            <button class="btn btn-secondary" @onclick="ToggleLoadPanel">
                <i class="bi bi-upload"></i> Load Game
            </button>
        </div>

        @if (_showSavePanel)
        {
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Save Game</h5>
                    <button type="button" class="btn-close" @onclick="ToggleSavePanel"></button>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(_saveErrorMessage))
                    {
                        <div class="alert alert-danger">@_saveErrorMessage</div>
                    }
                    <div class="form-group mb-3">
                        <label for="saveName" class="form-label">Save Name</label>
                        <input type="text" class="form-control" id="saveName" @bind="_saveName"
                            placeholder="Enter a name for your save" />
                    </div>
                    <button class="btn btn-primary" @onclick="SaveGame" disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Saving...</span>
                        }
                        else
                        {
                            <span>Save Game</span>
                        }
                    </button>
                </div>
            </div>
        }

        @if (_showLoadPanel)
        {
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Load Game</h5>
                    <button type="button" class="btn-close" @onclick="ToggleLoadPanel"></button>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(_loadErrorMessage))
                    {
                        <div class="alert alert-danger">@_loadErrorMessage</div>
                    }
                    @if (_isLoadingGames)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (_gameSaves.Count == 0)
                    {
                        <div class="alert alert-info">No saved games found.</div>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var save in _gameSaves)
                            {
                                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">@save.Name</h6>
                                        <small class="text-muted">@save.FormattedDate</small>
                                    </div>
                                    <div>
                                        <button class="btn btn-sm btn-primary me-2" @onclick="() => LoadGame(save.Id)">
                                            Load
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteSave(save.Id)">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }

        <div class="game-status mb-3">
            <div class="alert alert-info">
                <strong>@WebConstants.GameStatusText</strong> @(GameService.IsPaused ? WebConstants.PausedStatusText :
                WebConstants.RunningStatusText) |
            <strong>@WebConstants.AnimalsCountText</strong> @(GameService.GameEngine?.Animals.Count ?? 0) |
            <strong>@WebConstants.LionsCountText</strong> @(GameService.GameEngine?.Animals.Count(a => a.Name ==
                        GameConstants.LionName) ?? 0) |
            <strong>@WebConstants.AntelopesCountText</strong> @(GameService.GameEngine?.Animals.Count(a => a.Name ==
                        GameConstants.AntelopeName) ?? 0)
        </div>
    </div>

        <div class="row">
            <div class="col-lg-8">
                <div class="game-field mb-3" id="gameField"
                    style="position: relative; width: @(GameService.FieldWidth* WebConstants.CellSize)px; height: @(GameService.FieldHeight* WebConstants.CellSize)px; border: 1px solid #ccc; background-color: @WebConstants.GameFieldBackgroundColor;">
                @if (GameService.GameEngine != null)
                    {
                        @foreach (var animal in GameService.GameEngine.Animals)
                        {
                            string animalClass = GetAnimalClass(animal.Name);
                            string animalDisplay = GetAnimalDisplay(animal.Name);
                            bool isSelected = animal.IsSelected;

                            <div class="animal @animalClass @(isSelected ? "selected" : "")" @key="animal.GetHashCode()"
                                @onclick="() => SelectAnimal(animal)"
                                style="position: absolute; left: @(animal.Position.X * WebConstants.CellSize)px; top: @(animal.Position.Y * WebConstants.CellSize)px; width: @WebConstants.CellSize px; height: @WebConstants.CellSize px; cursor: pointer;">
                                @if (GameService.UseLetterDisplay)
                                {
                                    @(animal.Name.Substring(0, 1))
                                }
                                else
                                {
                                    @animalDisplay
                                }
                            </div>
                        }
                    }
                </div>

                <div class="game-log mb-3">
                    <h5>@WebConstants.GameLogText</h5>
                    <div class="log-container p-2 border"
                        style="height: @WebConstants.LogContainerHeight px; overflow-y: auto; background-color: @WebConstants.LogContainerBackgroundColor;">
                        @{
                            var logsCopy = GameService.GameLogs.ToList();
                            logsCopy.Reverse();

                            foreach (var log in logsCopy)
                            {
                                <div class="log-entry">@log</div>
                            }
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                @if (selectedAnimalDetails != null)
                {
                    <div class="animal-details-card">
                        <h3>@WebConstants.AnimalDetailsTitle</h3>
                        <table class="table">
                            <tbody>
                                <tr>
                                    <th>@WebConstants.SpeciesLabel</th>
                                    <td>@selectedAnimalDetails.Species</td>
                                </tr>
                                <tr>
                                    <th>@WebConstants.PositionLabel</th>
                                    <td>@selectedAnimalDetails.X, @selectedAnimalDetails.Y</td>
                                </tr>
                                <tr>
                                    <th>@WebConstants.HealthLabel</th>
                                    <td>
                                        <div class="progress">
                                            <div class="progress-bar @GetHealthColorClass(selectedAnimalDetails)"
                                                role="progressbar"
                                                style="width: @((selectedAnimalDetails.HealthPercentage).ToString("0"))%;"
                                                aria-valuenow="@selectedAnimalDetails.HealthPercentage" aria-valuemin="0"
                                                aria-valuemax="100">
                                                @((selectedAnimalDetails.HealthPercentage).ToString("0.0"))%
                                            </div>
                                        </div>
                                        <small class="text-muted">@selectedAnimalDetails.Health.ToString("0.0") /
                                            @selectedAnimalDetails.MaxHealth.ToString("0.0")</small>
                                    </td>
                                </tr>
                                <tr>
                                    <th>@WebConstants.AgeLabel</th>
                                    <td>@selectedAnimalDetails.Age @WebConstants.AgeUnitsText</td>
                                </tr>
                                <tr>
                                    <th>@WebConstants.OffspringLabel</th>
                                    <td>@selectedAnimalDetails.OffspringCount</td>
                                </tr>
                            </tbody>
                        </table>
                        <button class="btn btn-secondary" @onclick="DeselectAnimal">@WebConstants.CloseButtonText</button>
                    </div>
                }
            </div>
        </div>
    }
</div>

<NavigationWarningModal @ref="_navigationWarningModal" OnCancelNavigation="CancelNavigation"
    OnConfirmNavigation="ConfirmNavigation" />

<style>
    .animal {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 16px;
        transition: all 0.3s ease-out;
    }

    .animal.selected {
        box-shadow: 0 0 10px
            @WebConstants.SelectedAnimalGlowColor
        ;
        z-index: 10;
        transform: scale(1.2);
    }

    .lion {
        color:
            @WebConstants.LionColor
        ;
    }

    .antelope {
        color:
            @WebConstants.AntelopeColor
        ;
    }

    .animal-details-card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        padding: 20px;
        margin-top: 10px;
        position: sticky;
        top: 20px;
    }

    .animal-details-card h3 {
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }
</style>

@code {
    private string _pendingNavigation = null;
    private NavigationWarningModal _navigationWarningModal;
    private AnimalDetailViewModel? selectedAnimalDetails;
    private IAnimal? _selectedAnimal;
    private System.Timers.Timer? _detailsUpdateTimer;
    private string _saveName = string.Empty;
    private string _saveErrorMessage = string.Empty;
    private string _loadErrorMessage = string.Empty;
    private bool _isSaving = false;
    private bool _isLoadingGames = false;
    private List<GameSaveViewModel> _gameSaves = new();
    private string _userId = string.Empty;
    private bool _showSavePanel = false;
    private bool _showLoadPanel = false;

    protected override async Task OnInitializedAsync()
    {
        GameService.GameStateChanged += OnGameStateChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        GameService.AnimalSelectionChanged += OnAnimalSelectionChanged;

        _detailsUpdateTimer = new System.Timers.Timer(WebConstants.AnimalDetailsUpdateInterval);
        _detailsUpdateTimer.Elapsed += UpdateSelectedAnimalDetails;
        _detailsUpdateTimer.AutoReset = true;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("window.setupGame");
            }
            catch (Exception ex)
            {
                GameService.LogMessage(string.Format(WebConstants.JavaScriptInitializationErrorMessage, ex.Message));
            }
        }
    }

    private void OnGameStateChanged(object sender, EventArgs e)
    {
        if (_selectedAnimal != null && _selectedAnimal.isAlive)
        {
            RefreshSelectedAnimalDetails();
        }
        else if (_selectedAnimal != null && !_selectedAnimal.isAlive)
        {
            DeselectAnimal();
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnAnimalSelectionChanged(object? sender, AnimalDetailViewModel? animal)
    {
        selectedAnimalDetails = animal;

        if (animal != null)
        {
            _selectedAnimal = GameService.GameEngine?.Animals.FirstOrDefault(a => a.Id == animal.Id);

            _detailsUpdateTimer?.Start();
        }
        else
        {
            _detailsUpdateTimer?.Stop();
            _selectedAnimal = null;
        }

        InvokeAsync(StateHasChanged);
    }

    private void UpdateSelectedAnimalDetails(object? sender, ElapsedEventArgs e)
    {
        if (_selectedAnimal != null && _selectedAnimal.isAlive && GameService.IsGameRunning && !GameService.IsPaused)
        {
            RefreshSelectedAnimalDetails();
        }
    }

    private void RefreshSelectedAnimalDetails()
    {
        if (_selectedAnimal != null && GameService.GameEngine != null)
        {
            var animal = GameService.GameEngine.Animals.FirstOrDefault(a => a.Id == _selectedAnimal.Id);

            if (animal != null && animal.isAlive)
            {
                selectedAnimalDetails = AnimalDetailViewModel.FromAnimal(animal);
                InvokeAsync(StateHasChanged);
            }
            else
            {
                DeselectAnimal();
            }
        }
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (GameService.IsGameRunning && !e.Location.EndsWith("/game"))
        {
            _pendingNavigation = e.Location;
            _ = ShowNavigationWarningModal();
        }
    }

    private async Task ShowNavigationWarningModal()
    {
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.ShowModal();
        }
    }

    private async void CancelNavigation()
    {
        _pendingNavigation = null;
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.HideModal();
        }
    }

    private async void ConfirmNavigation()
    {
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.HideModal();
        }

        await SetBeforeUnloadWarning(false);

        try
        {
            string destination = await JSRuntime.InvokeAsync<string>("window.getAndClearPendingNavigation");

            GameService.LogMessage(string.Format(WebConstants.NavigatingToMessage, destination));

            GameService.StopTimer();

            if (NavigationManager.Uri == destination)
            {
                await JSRuntime.InvokeVoidAsync("window.location.reload");
            }
            else
            {
                if (!string.IsNullOrEmpty(_pendingNavigation) && string.IsNullOrEmpty(destination))
                {
                    destination = _pendingNavigation;
                }

                NavigationManager.NavigateTo(destination);
            }
        }
        catch (Exception ex)
        {
            GameService.LogMessage(string.Format(WebConstants.NavigationErrorMessage, ex.Message));
        }
    }

    private async Task SetBeforeUnloadWarning(bool enabled)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.setBeforeUnloadWarning", enabled);
        }
        catch
        {
        }
    }

    private async Task StartNewGame()
    {
        var renderer = GameRenderer.CreateRenderer(GameService.LogMessage);
        GameService.StartNewGame(renderer);
        GameService.StartTimer();
        GameService.LogMessage(WebConstants.GameStartedMessage);

        await SetBeforeUnloadWarning(true);
    }

    private void StopGame()
    {
        GameService.StopGame();
        GameService.LogMessage(WebConstants.GameStoppedMessage);
    }

    private void TogglePause()
    {
        GameService.TogglePause();
        GameService.LogMessage(GameService.IsPaused ? WebConstants.GamePausedMessage : WebConstants.GameResumedMessage);
    }

    private void SpawnAntelope()
    {
        GameService.SpawnAntelope();
    }

    private void SpawnLion()
    {
        GameService.SpawnLion();
    }

    private void ToggleDisplayMode()
    {
        GameService.ToggleDisplayMode();
    }

    private void ToggleSavePanel()
    {
        _showSavePanel = !_showSavePanel;
        _saveName = string.Empty;
        _saveErrorMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ToggleLoadPanel()
    {
        if (_showLoadPanel)
        {
            _showLoadPanel = false;
            StateHasChanged();
            return;
        }

        _showLoadPanel = true;
        _loadErrorMessage = string.Empty;
        _isLoadingGames = true;
        StateHasChanged();

        try
        {
            var saves = await GameSaveService.GetSavesForUserAsync(_userId);
            _gameSaves = saves.Select(s => new GameSaveViewModel
            {
                Id = s.Id,
                Name = s.Name,
                CreatedAt = s.CreatedAt
            }).ToList();

            _isLoadingGames = false;
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Failed to load saved games: " + ex.Message;
            _isLoadingGames = false;
        }

        StateHasChanged();
    }

    private async Task SaveGame()
    {
        if (string.IsNullOrWhiteSpace(_saveName))
        {
            _saveErrorMessage = "Please enter a name for your save";
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            string gameStateJson = GameService.SerializeGameState();
            await GameSaveService.CreateSaveAsync(_saveName, gameStateJson, _userId);

            _isSaving = false;
            _showSavePanel = false;
            GameService.LogMessage(WebConstants.SaveGameSuccessMessage);
        }
        catch (Exception ex)
        {
            _saveErrorMessage = "Error saving game: " + ex.Message;
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task LoadGame(int saveId)
    {
        try
        {
            var save = await GameSaveService.GetSaveByIdAsync(saveId);
            if (save == null)
            {
                _loadErrorMessage = "Save not found";
                return;
            }

            var renderer = GameRenderer.CreateRenderer(GameService.LogMessage);
            GameService.LoadGameState(save.GameStateJson, renderer);
            GameService.LogMessage(WebConstants.LoadGameSuccessMessage);
            GameService.StartTimer();

            _showLoadPanel = false;
            await SetBeforeUnloadWarning(true);
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Error loading game: " + ex.Message;
            StateHasChanged();
        }
    }

    private async Task DeleteSave(int saveId)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this save?");
            if (!confirmed)
                return;

            await GameSaveService.DeleteSaveAsync(saveId, _userId);

            var saves = await GameSaveService.GetSavesForUserAsync(_userId);
            _gameSaves = saves.Select(s => new GameSaveViewModel
            {
                Id = s.Id,
                Name = s.Name,
                CreatedAt = s.CreatedAt
            }).ToList();

            StateHasChanged();
            GameService.LogMessage("Game save deleted");
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Error deleting save: " + ex.Message;
            StateHasChanged();
        }
    }

    private string GetAnimalClass(string animalName)
    {
        return animalName.ToLower();
    }

    private string GetAnimalDisplay(string animalName)
    {
        return animalName switch
        {
            GameConstants.LionName => GameConstants.LionSymbol,
            GameConstants.AntelopeName => GameConstants.AntelopeSymbol,
            GameConstants.CaracalName => GameConstants.CaracalSymbol,
            _ => GameConstants.UnknownAnimalSymbol
        };
    }

    private void SelectAnimal(IAnimal animal)
    {
        _selectedAnimal = animal;
        GameService.SelectAnimalAt(animal.Position.X, animal.Position.Y);
    }

    private void DeselectAnimal()
    {
        GameService.DeselectAnimal();
        selectedAnimalDetails = null;
        _selectedAnimal = null;
        _detailsUpdateTimer?.Stop();
        InvokeAsync(StateHasChanged);
    }

    private string GetHealthColorClass(AnimalDetailViewModel animal) => animal.HealthPercentage switch
    {
        <= GameConstants.LowHealthThreshold => "bg-danger",
        <= GameConstants.MediumHealthThreshold => "bg-warning",
        _ => "bg-success"
    };

    public void Dispose()
    {
        GameService.GameStateChanged -= OnGameStateChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
        GameService.AnimalSelectionChanged -= OnAnimalSelectionChanged;

        // Clean up timer
        if (_detailsUpdateTimer != null)
        {
            _detailsUpdateTimer.Elapsed -= UpdateSelectedAnimalDetails;
            _detailsUpdateTimer.Stop();
            _detailsUpdateTimer.Dispose();
            _detailsUpdateTimer = null;
        }
    }
}