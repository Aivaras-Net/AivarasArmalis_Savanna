@page "/game"
@using Savanna.Core
@using Savanna.Core.Domain
@using Savanna.Core.Domain.Interfaces
@using Savanna.Core.Constants
@using System.Timers
@using Microsoft.JSInterop
@using Savanna.Core.Interfaces
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Savanna Game</PageTitle>

<div class="game-container mb-4">
    <h1>Savanna Game</h1>

    @if (!_isGameRunning)
    {
        <div class="game-menu">
            <button class="btn btn-primary" @onclick="StartNewGame">Start New Game</button>
        </div>
    }
    else
    {
        <div class="game-controls mb-3">
            <button class="btn btn-warning me-2" @onclick="TogglePause">
                @(_isPaused ? "Resume" : "Pause")
            </button>
            <button class="btn btn-danger me-2" @onclick="StopGame">
                Stop Game
            </button>
            <div class="btn-group me-2">
                <button class="btn btn-success" @onclick="SpawnAntelope">Spawn Antelope</button>
                <button class="btn btn-danger" @onclick="SpawnLion">Spawn Lion</button>
            </div>
        </div>

        <div class="game-status mb-3">
            <div class="alert alert-info">
                <strong>Game Status:</strong> @(_isPaused ? "Paused" : "Running") |
                <strong>Animals:</strong> @(_gameEngine?.Animals.Count ?? 0) |
                <strong>Lions:</strong> @(_gameEngine?.Animals.Count(a => a.Name == GameConstants.LionName) ?? 0) |
                <strong>Antelopes:</strong> @(_gameEngine?.Animals.Count(a => a.Name == GameConstants.AntelopeName) ?? 0)
            </div>
        </div>

        <div class="game-field mb-3" id="gameField"
            style="position: relative; width: @(_fieldWidth * 20)px; height: @(_fieldHeight * 20)px; border: 1px solid #ccc; background-color: #8fbf9f;">
            @if (_gameEngine != null)
            {
                @foreach (var animal in _gameEngine.Animals)
                {
                    string animalClass = animal.Name == GameConstants.LionName ? "lion" : "antelope";
                    <div class="animal @animalClass" @key="animal.GetHashCode()"
                        style="position: absolute; left: @(animal.Position.X * 20)px; top: @(animal.Position.Y * 20)px; width: 20px; height: 20px;">
                        @(animal.Name == GameConstants.LionName ? "ü¶Å" : "ü¶å")
                    </div>
                }
            }
        </div>

        <div class="game-log mb-3">
            <h5>Game Log</h5>
            <div class="log-container p-2 border" style="height: 150px; overflow-y: auto; background-color: #f8f9fa;">
                @foreach (var log in _gameLogs.AsEnumerable().Reverse())
                {
                    <div class="log-entry">@log</div>
                }
            </div>
        </div>
    }
</div>

<NavigationWarningModal @ref="_navigationWarningModal" OnCancelNavigation="CancelNavigation"
    OnConfirmNavigation="ConfirmNavigation" />

<style>
    .animal {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 16px;
        transition: all 0.3s ease-out;
    }

    .lion {
        color: #cc3300;
    }

    .antelope {
        color: #33cc33;
    }
</style>

@code {
    private GameEngine _gameEngine;
    private Timer _gameTimer;
    private bool _isGameRunning = false;
    private bool _isPaused = false;
    private int _fieldWidth = GameConstants.DefaultFieldWidth;
    private int _fieldHeight = GameConstants.DefaultFieldHeight;
    private readonly List<string> _gameLogs = new List<string>();
    private Random _random = new Random();
    private string _pendingNavigation = null;
    private NavigationWarningModal _navigationWarningModal;

    private const int TimerInterval = 500;

    protected override void OnInitialized()
    {
        _gameTimer = new Timer(TimerInterval);
        _gameTimer.Elapsed += GameTimerElapsed;

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("window.setupGame");
            }
            catch (Exception ex)
            {
                LogMessage($"JavaScript initialization error: {ex.Message}");
            }
        }
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (_isGameRunning && !e.Location.EndsWith("/game"))
        {
            _pendingNavigation = e.Location;

            _ = ShowNavigationWarningModal();

            // should intercept and prevent the navigation here
        }
    }

    private async Task ShowNavigationWarningModal()
    {
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.ShowModal();
        }
    }

    private async void CancelNavigation()
    {
        _pendingNavigation = null;
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.HideModal();
        }
    }

    private async void ConfirmNavigation()
    {
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.HideModal();
        }

        await SetBeforeUnloadWarning(false);

        try
        {
            string destination = await JSRuntime.InvokeAsync<string>("window.getAndClearPendingNavigation");

            LogMessage($"Navigating to: {destination}");

            _gameTimer?.Stop();
            _isGameRunning = false;
            _gameEngine = null;

            if (NavigationManager.Uri == destination)
            {
                await JSRuntime.InvokeVoidAsync("window.location.reload");
            }
            else
            {
                if (!string.IsNullOrEmpty(_pendingNavigation) &&
                string.IsNullOrEmpty(destination))
                {
                    destination = _pendingNavigation;
                }

                if (string.IsNullOrEmpty(destination))
                {
                    destination = "/";
                }

                NavigationManager.NavigateTo(destination, forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            LogMessage($"Navigation error: {ex.Message}");

            NavigationManager.NavigateTo("/", forceLoad: true);
        }

        _pendingNavigation = null;
    }

    private async Task SetBeforeUnloadWarning(bool enable)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.setBeforeUnloadWarning", enable);
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("JavaScript interop"))
        {
        }
    }

    private async void StartNewGame()
    {
        _gameEngine = new GameEngine(new WebRenderer(this));
        _isGameRunning = true;
        _isPaused = false;
        _gameLogs.Clear();
        LogMessage("Game started");

        SpawnAntelope();
        SpawnAntelope();
        SpawnLion();

        _gameTimer.Start();

        try
        {
            await SetBeforeUnloadWarning(true);
        }
        catch (Exception ex)
        {
            LogMessage($"Warning: Could not set beforeunload warning: {ex.Message}");
        }
    }

    private async void StopGame()
    {
        _gameTimer.Stop();
        _isGameRunning = false;
        _isPaused = false;
        _gameEngine = null;
        LogMessage("Game stopped");
        try
        {
            await SetBeforeUnloadWarning(false);
        }
        catch (Exception ex)
        {
        }
    }

    private void TogglePause()
    {
        _isPaused = !_isPaused;
        LogMessage(_isPaused ? "Game paused" : "Game resumed");
    }

    private void SpawnAntelope()
    {
        if (_gameEngine == null) return;

        var position = GetRandomPosition();
        _gameEngine.AddAnimal(new Antelope(1.5, 5.0, position), true);
        LogMessage($"Antelope spawned at ({position.X}, {position.Y})");
        StateHasChanged();
    }

    private void SpawnLion()
    {
        if (_gameEngine == null) return;

        var position = GetRandomPosition();
        _gameEngine.AddAnimal(new Lion(2.0, 7.0, position), true);
        LogMessage($"Lion spawned at ({position.X}, {position.Y})");
        StateHasChanged();
    }

    private Position GetRandomPosition()
    {
        return new Position(
        _random.Next(_fieldWidth),
        _random.Next(_fieldHeight)
        );
    }

    private async void GameTimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (!_isGameRunning || _isPaused || _gameEngine == null)
            return;

        await InvokeAsync(() =>
        {
            _gameEngine.Update();
            StateHasChanged();
        });
    }

    public void LogMessage(string message)
    {
        _gameLogs.Add($"[{DateTime.Now:HH:mm:ss}] {message}");
        if (_gameLogs.Count > 100)
            _gameLogs.RemoveAt(0);
    }

    public async void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;

        _gameTimer?.Stop();
        _gameTimer?.Dispose();

        try
        {
            if (_isGameRunning)
            {
                await SetBeforeUnloadWarning(false);
            }
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("JavaScript interop"))
        {

        }
    }

    private class WebRenderer : IConsoleRenderer
    {
        private readonly Game _parent;

        public WebRenderer(Game parent)
        {
            _parent = parent;
        }

        public void DrawField()
        {
        }

        public void RenderField(char[,] grid)
        {
        }

        public ConsoleColor GetAnimalColor(string animalName)
        {
            return animalName == GameConstants.LionName ? ConsoleColor.Red : ConsoleColor.Green;
        }

        public void RegisterAnimalColor(string animalName)
        {
        }

        public void ShowLog(string message, int frames)
        {
            _parent.LogMessage(message);
        }
    }
}