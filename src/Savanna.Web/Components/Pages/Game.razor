@page "/game"
@using Savanna.Core
@using Savanna.Domain
@using Savanna.Domain.Interfaces
@using Savanna.Core.Constants
@using Savanna.Web.Constants
@using System.Timers
@using Microsoft.JSInterop
@using Microsoft.JSInterop.Infrastructure
@using Savanna.Core.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Savanna.Web.Services.Interfaces
@using Savanna.Web.Models
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IGameService GameService
@inject IGameRenderer GameRenderer
@inject IGameSaveService GameSaveService
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Savanna Game</PageTitle>

<div class="game-container">
    <div class="game-header">
        <h1 class="game-title">Savanna World Simulation</h1>

        @if (GameService.IsGameRunning)
        {
            <div class="game-status-panel">
                <div class="status-indicator @(GameService.IsPaused ? "paused" : "running")">
                    <i class="bi @(GameService.IsPaused ? "bi-pause-circle" : "bi-play-circle")"></i>
                    <span>@(GameService.IsPaused ? "Paused" : "Running")</span>
                </div>
                <div class="status-counts">
                    <div class="status-count">
                        <i class="bi bi-bug"></i>
                        <span>@(GameService.GameEngine?.Animals.Count ?? 0) Animals</span>
                    </div>
                    <div class="status-count lion-count">
                        <i class="bi bi-emoji-angry"></i>
                        <span>@(GameService.GameEngine?.Animals.Count(a => a.Name == GameConstants.LionName) ?? 0)
                            Lions</span>
                    </div>
                    <div class="status-count antelope-count">
                        <i class="bi bi-emoji-smile"></i>
                        <span>@(GameService.GameEngine?.Animals.Count(a => a.Name == GameConstants.AntelopeName) ?? 0)
                            Antelopes</span>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!GameService.IsGameRunning)
    {
        <div class="welcome-panel">
            <div class="welcome-content">
                <h2>Welcome to Savanna World</h2>
                <p>Experience the circle of life in this interactive ecosystem simulation where lions hunt antelopes in a
                    dynamic virtual environment.</p>
                <div class="features-grid">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="bi bi-compass"></i>
                        </div>
                        <h3>Explore</h3>
                        <p>Watch as lions hunt antelopes in a realistic ecosystem.</p>
                    </div>
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="bi bi-sliders"></i>
                        </div>
                        <h3>Control</h3>
                        <p>Add new animals, pause simulation, and influence the ecosystem.</p>
                    </div>
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="bi bi-save"></i>
                        </div>
                        <h3>Save</h3>
                        <p>Create multiple scenarios and revisit them anytime.</p>
                    </div>
                </div>
                <button class="btn btn-primary btn-lg start-button" @onclick="StartNewGame">
                    <i class="bi bi-play-fill me-2"></i>Start Simulation
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="game-dashboard">
            <div class="dashboard-controls">
                <div class="controls-group">
                    <button class="btn @(GameService.IsPaused ? "btn-success" : "btn-warning")" @onclick="TogglePause">
                        <i class="bi @(GameService.IsPaused ? "bi-play-fill" : "bi-pause-fill")"></i>
                        @(GameService.IsPaused ? "Resume" : "Pause")
                    </button>
                    <button class="btn btn-danger" @onclick="StopGame">
                        <i class="bi bi-stop-fill"></i> Stop
                    </button>
                </div>

                <div class="controls-group">
                    <button class="btn btn-success" @onclick="SpawnAntelope">
                        <i class="bi bi-plus-circle"></i> Add Antelope
                    </button>
                    <button class="btn btn-danger" @onclick="SpawnLion">
                        <i class="bi bi-plus-circle"></i> Add Lion
                    </button>
                </div>

                <div class="controls-group">
                    <button class="btn btn-info" @onclick="ToggleDisplayMode">
                        <i class="bi bi-eye"></i>
                        @(GameService.UseLetterDisplay ? "Show Icons" : "Show Letters")
                    </button>
                </div>

                <div class="controls-group">
                    <button class="btn btn-secondary" @onclick="ToggleSavePanel">
                        <i class="bi bi-save"></i> Save
                    </button>
                    <button class="btn btn-secondary" @onclick="ToggleLoadPanel">
                        <i class="bi bi-upload"></i> Load
                    </button>
                </div>
            </div>

            @if (_showSavePanel)
            {
                <div class="modal-overlay">
                    <div class="modal-panel">
                        <div class="modal-header">
                            <h3>Save Game</h3>
                            <button type="button" class="btn-close" @onclick="ToggleSavePanel"></button>
                        </div>
                        <div class="modal-body">
                            @if (!string.IsNullOrEmpty(_saveErrorMessage))
                            {
                                <div class="alert alert-danger">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    @_saveErrorMessage
                                </div>
                            }
                            <div class="form-group mb-3">
                                <label for="saveName" class="form-label">Save Name</label>
                                <input type="text" class="form-control" id="saveName" @bind="_saveName"
                                    placeholder="Enter a name for your save" />
                            </div>
                            <button class="btn btn-primary w-100" @onclick="SaveGame" disabled="@_isSaving">
                                @if (_isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Saving...</span>
                                }
                                else
                                {
                                    <span>Save Game</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            }

            @if (_showLoadPanel)
            {
                <div class="modal-overlay">
                    <div class="modal-panel">
                        <div class="modal-header">
                            <h3>Load Game</h3>
                            <button type="button" class="btn-close" @onclick="ToggleLoadPanel"></button>
                        </div>
                        <div class="modal-body">
                            @if (!string.IsNullOrEmpty(_loadErrorMessage))
                            {
                                <div class="alert alert-danger">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    @_loadErrorMessage
                                </div>
                            }

                            @if (_isLoadingGames)
                            {
                                <div class="loading-spinner">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p>Loading your saved games...</p>
                                </div>
                            }
                            else if (_gameSaves.Count == 0)
                            {
                                <div class="empty-state">
                                    <i class="bi bi-archive"></i>
                                    <p>No saved games found</p>
                                    <small>Save your current game to see it here</small>
                                </div>
                            }
                            else
                            {
                                <div class="saved-games-list">
                                    @foreach (var save in _gameSaves)
                                    {
                                        <div class="saved-game-item">
                                            <div class="saved-game-info">
                                                <h4>@save.Name</h4>
                                                <span class="saved-date">@save.FormattedDate</span>
                                            </div>
                                            <div class="saved-game-actions">
                                                <button class="btn btn-sm btn-primary" @onclick="() => LoadGame(save.Id)">
                                                    <i class="bi bi-play-fill"></i> Load
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteSave(save.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <div class="game-content">
                <div class="game-field-container">
                    <div class="game-field" id="gameField"
                        style="width: @(GameService.FieldWidth* WebConstants.CellSize)px; height: @(GameService.FieldHeight* WebConstants.CellSize)px;">
                        @if (GameService.GameEngine != null)
                        {
                            @foreach (var animal in GameService.GameEngine.Animals)
                            {
                                string animalClass = GetAnimalClass(animal.Name);
                                string animalDisplay = GetAnimalDisplay(animal.Name);
                                bool isSelected = animal.IsSelected;

                                <div class="animal @animalClass @(isSelected ? "selected" : "")" @key="animal.GetHashCode()"
                                    @onclick="() => SelectAnimal(animal)"
                                    style="left: @(animal.Position.X * WebConstants.CellSize)px; top: @(animal.Position.Y * WebConstants.CellSize)px;">
                                    @if (GameService.UseLetterDisplay)
                                    {
                                        @(animal.Name.Substring(0, 1))
                                    }
                                    else
                                    {
                                        @animalDisplay
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>

                <div class="sidebar-container">
                    @if (selectedAnimalDetails != null)
                    {
                        <div class="animal-details-panel">
                            <div class="panel-header">
                                <h3>
                                    <i
                                        class="bi @(selectedAnimalDetails.Species == GameConstants.LionName ? "bi-emoji-angry" : "bi-emoji-smile")"></i>
                                    @selectedAnimalDetails.Species
                                </h3>
                                <button class="close-btn" @onclick="DeselectAnimal">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>

                            <div class="detail-item">
                                <span class="detail-label">Position</span>
                                <span class="detail-value">@selectedAnimalDetails.X, @selectedAnimalDetails.Y</span>
                            </div>

                            <div class="detail-item">
                                <span class="detail-label">Health</span>
                                <div class="health-indicator">
                                    <div class="progress">
                                        <div class="progress-bar @GetHealthColorClass(selectedAnimalDetails)"
                                            style="width: @((selectedAnimalDetails.HealthPercentage).ToString("0"))%;">
                                            @((selectedAnimalDetails.HealthPercentage).ToString("0.0"))%
                                        </div>
                                    </div>
                                    <small>@selectedAnimalDetails.Health.ToString("0.0") /
                                        @selectedAnimalDetails.MaxHealth.ToString("0.0")</small>
                                </div>
                            </div>

                            <div class="detail-item">
                                <span class="detail-label">Age</span>
                                <span class="detail-value">@selectedAnimalDetails.Age @WebConstants.AgeUnitsText</span>
                            </div>

                            <div class="detail-item">
                                <span class="detail-label">Offspring</span>
                                <span class="detail-value">@selectedAnimalDetails.OffspringCount</span>
                            </div>
                        </div>
                    }

                    <div class="game-log-panel">
                        <h3>Activity Log</h3>
                        <div class="log-container">
                            @{
                                var logsCopy = GameService.GameLogs.ToList();
                                logsCopy.Reverse();

                                foreach (var log in logsCopy)
                                {
                                    <div class="log-entry">@log</div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<NavigationWarningModal @ref="_navigationWarningModal" OnCancelNavigation="CancelNavigation"
    OnConfirmNavigation="ConfirmNavigation" />

<style>
    /* Main layout */
    .game-container {
        background-color: var(--savanna-sand-light);
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 1.5rem;
        margin-bottom: 2rem;
        max-width: 100%;
    }

    .game-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .game-title {
        color: var(--savanna-earth);
        font-weight: 700;
        margin: 0;
        font-size: 2rem;
    }

    /* Welcome panel */
    .welcome-panel {
        background: linear-gradient(135deg, #e9c583 0%, #f2e2c9 100%);
        border-radius: var(--border-radius);
        overflow: hidden;
        padding: 3rem 2rem;
        text-align: center;
        position: relative;
    }

    .welcome-panel:before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(to right, #e07b39, #8ba446, #e07b39);
    }

    .welcome-content {
        max-width: 800px;
        margin: 0 auto;
    }

    .welcome-content h2 {
        color: #5d4037;
        margin-bottom: 1rem;
        font-weight: 700;
    }

    .welcome-content p {
        color: #5d4037;
        margin-bottom: 2rem;
        font-size: 1.1rem;
    }

    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2.5rem;
    }

    .feature-card {
        background-color: rgba(255, 255, 255, 0.8);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        text-align: center;
        transition: transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .feature-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
    }

    .feature-icon {
        font-size: 2rem;
        margin-bottom: 1rem;
        color: #e07b39;
        display: inline-block;
    }

    .feature-card h3 {
        color: #5d4037;
        margin-bottom: 0.5rem;
    }

    .feature-card p {
        color: #5d4037;
        margin-bottom: 0;
        font-size: 0.9rem;
    }

    .start-button {
        background-color: #e07b39;
        border: none;
        padding: 0.75rem 2rem;
        font-size: 1.2rem;
        font-weight: 600;
        transition: transform 0.3s, background-color 0.3s;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        color: white;
    }

    .start-button:hover {
        background-color: #c56a2d;
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    }

    /* Game Status Panel */
    .game-status-panel {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        background-color: white;
        padding: 0.75rem 1.25rem;
        border-radius: var(--border-radius);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding-right: 1.5rem;
        border-right: 1px solid rgba(0, 0, 0, 0.1);
    }

    .status-indicator.running {
        color: var(--success);
    }

    .status-indicator.paused {
        color: var(--warning);
    }

    .status-counts {
        display: flex;
        align-items: center;
        gap: 1.25rem;
    }

    .status-count {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .lion-count {
        color: var(--danger);
    }

    .antelope-count {
        color: var(--success);
    }

    /* Dashboard layout */
    .game-dashboard {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .dashboard-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        background-color: #f8f0e3;
        padding: 1.2rem;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
    }

    .controls-group {
        display: flex;
        gap: 0.75rem;
    }

    .controls-group:not(:last-child) {
        padding-right: 1rem;
        border-right: 1px solid rgba(0, 0, 0, 0.1);
    }

    .controls-group .btn {
        font-weight: 600;
        padding: 0.5rem 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
        border: none;
    }

    .controls-group .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .controls-group .btn-success {
        background-color: #5cb85c;
    }

    .controls-group .btn-danger {
        background-color: #d9534f;
    }

    .controls-group .btn-warning {
        background-color: #f0ad4e;
    }

    .controls-group .btn-info {
        background-color: #5bc0de;
    }

    .controls-group .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    /* Game content layout */
    .game-content {
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 1.5rem;
    }

    /* Game field */
    .game-field-container {
        background-color: #f8f0e3;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 1rem;
        overflow: auto;
        min-height: 70vh;
        max-height: 80vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .game-field {
        position: relative;
        border: 2px solid #5d4037;
        border-radius: var(--border-radius);
        background-color: #8ba446;
        background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239e9764' fill-opacity='0.25'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        max-width: 100%;
        max-height: 100%;
        margin: 0 auto;
    }

    /* Sidebar */
    .sidebar-container {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* Animal details panel */
    .animal-details-panel {
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
    }

    .panel-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background-color: #f8f0e3;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }

    .panel-header h3 {
        margin: 0;
        font-size: 1.25rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .close-btn {
        background: none;
        border: none;
        cursor: pointer;
        color: #5d4037;
        opacity: 0.7;
        transition: opacity 0.2s;
        padding: 0.25rem;
    }

    .close-btn:hover {
        opacity: 1;
    }

    .detail-item {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .detail-label {
        display: block;
        color: #6c757d;
        font-size: 0.8rem;
        margin-bottom: 0.25rem;
    }

    .detail-value {
        font-weight: 500;
        color: #5d4037;
    }

    .health-indicator {
        margin-top: 0.25rem;
    }

    .health-indicator small {
        display: block;
        text-align: right;
        color: #6c757d;
        margin-top: 0.25rem;
    }

    /* Log panel */
    .game-log-panel {
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .game-log-panel h3 {
        margin: 0;
        padding: 1rem;
        background-color: #f8f0e3;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        font-size: 1.25rem;
    }

    .log-container {
        padding: 0.5rem;
        height: 300px;
        overflow-y: auto;
        background-color: #f8f0e3;
        flex-grow: 1;
    }

    .log-entry {
        padding: 0.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        font-size: 0.9rem;
    }

    .log-entry:last-child {
        border-bottom: none;
    }

    /* Animals */
    .animal {
        position: absolute;
        width:
            @WebConstants.CellSize
            px;
        height:
            @WebConstants.CellSize
            px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1.2rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease-out;
        z-index: 1;
    }

    .animal.selected {
        box-shadow: 0 0 0 3px #fff, 0 0 0 6px #e07b39;
        z-index: 10;
        transform: scale(1.2);
    }

    .lion {
        color: #ff4136;
        text-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    }

    .antelope {
        color: #3d9970;
        text-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    }

    /* Modal */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-panel {
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        width: 100%;
        max-width: 450px;
        animation: fadeIn 0.3s;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }

    .modal-header h3 {
        margin: 0;
        font-size: 1.25rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .empty-state {
        text-align: center;
        padding: 2rem 1rem;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-state p {
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
    }

    .loading-spinner {
        text-align: center;
        padding: 2rem 1rem;
    }

    .loading-spinner .spinner-border {
        margin-bottom: 1rem;
        color: #e07b39;
    }

    .saved-games-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        max-height: 300px;
        overflow-y: auto;
    }

    .saved-game-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: var(--border-radius);
        background-color: #f8f0e3;
        transition: background-color 0.2s;
    }

    .saved-game-item:hover {
        background-color: rgba(0, 0, 0, 0.03);
    }

    .saved-game-info h4 {
        margin: 0;
        font-size: 1rem;
    }

    .saved-date {
        font-size: 0.8rem;
        color: #6c757d;
    }

    .saved-game-actions {
        display: flex;
        gap: 0.5rem;
    }

    /* Keyframes animation */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive adjustments */
    @@media only screen and (max-width: 992px) {
        .game-content {
            grid-template-columns: 1fr;
        }

        .sidebar-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
        }

        .game-field-container {
            min-height: 50vh;
        }
    }

    @@media only screen and (max-width: 768px) {
        .sidebar-container {
            grid-template-columns: 1fr;
        }

        .controls-group {
            flex-direction: column;
        }

        .controls-group:not(:last-child) {
            padding-right: 0;
            border-right: none;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }
    }
</style>

@code {
    private string _pendingNavigation = null;
    private NavigationWarningModal _navigationWarningModal;
    private AnimalDetailViewModel? selectedAnimalDetails;
    private IAnimal? _selectedAnimal;
    private System.Timers.Timer? _detailsUpdateTimer;
    private string _saveName = string.Empty;
    private string _saveErrorMessage = string.Empty;
    private string _loadErrorMessage = string.Empty;
    private bool _isSaving = false;
    private bool _isLoadingGames = false;
    private List<GameSaveViewModel> _gameSaves = new();
    private string _userId = string.Empty;
    private bool _showSavePanel = false;
    private bool _showLoadPanel = false;

    protected override async Task OnInitializedAsync()
    {
        GameService.GameStateChanged += OnGameStateChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        GameService.AnimalSelectionChanged += OnAnimalSelectionChanged;

        _detailsUpdateTimer = new System.Timers.Timer(WebConstants.AnimalDetailsUpdateInterval);
        _detailsUpdateTimer.Elapsed += UpdateSelectedAnimalDetails;
        _detailsUpdateTimer.AutoReset = true;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("window.setupGame");
            }
            catch (Exception ex)
            {
                GameService.LogMessage(string.Format(WebConstants.JavaScriptInitializationErrorMessage, ex.Message));
            }
        }
    }

    private void OnGameStateChanged(object sender, EventArgs e)
    {
        if (_selectedAnimal != null && _selectedAnimal.isAlive)
        {
            RefreshSelectedAnimalDetails();
        }
        else if (_selectedAnimal != null && !_selectedAnimal.isAlive)
        {
            DeselectAnimal();
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnAnimalSelectionChanged(object? sender, AnimalDetailViewModel? animal)
    {
        selectedAnimalDetails = animal;

        if (animal != null)
        {
            _selectedAnimal = GameService.GameEngine?.Animals.FirstOrDefault(a => a.Id == animal.Id);

            _detailsUpdateTimer?.Start();
        }
        else
        {
            _detailsUpdateTimer?.Stop();
            _selectedAnimal = null;
        }

        InvokeAsync(StateHasChanged);
    }

    private void UpdateSelectedAnimalDetails(object? sender, ElapsedEventArgs e)
    {
        if (_selectedAnimal != null && _selectedAnimal.isAlive && GameService.IsGameRunning && !GameService.IsPaused)
        {
            RefreshSelectedAnimalDetails();
        }
    }

    private void RefreshSelectedAnimalDetails()
    {
        if (_selectedAnimal != null && GameService.GameEngine != null)
        {
            var animal = GameService.GameEngine.Animals.FirstOrDefault(a => a.Id == _selectedAnimal.Id);

            if (animal != null && animal.isAlive)
            {
                selectedAnimalDetails = AnimalDetailViewModel.FromAnimal(animal);
                InvokeAsync(StateHasChanged);
            }
            else
            {
                DeselectAnimal();
            }
        }
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (GameService.IsGameRunning && !e.Location.EndsWith("/game"))
        {
            _pendingNavigation = e.Location;
            _ = ShowNavigationWarningModal();
        }
    }

    private async Task ShowNavigationWarningModal()
    {
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.ShowModal();
        }
    }

    private async void CancelNavigation()
    {
        _pendingNavigation = null;
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.HideModal();
        }
    }

    private async void ConfirmNavigation()
    {
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.HideModal();
        }

        await SetBeforeUnloadWarning(false);

        try
        {
            string destination = await JSRuntime.InvokeAsync<string>("window.getAndClearPendingNavigation");

            GameService.LogMessage(string.Format(WebConstants.NavigatingToMessage, destination));

            GameService.StopTimer();

            if (NavigationManager.Uri == destination)
            {
                await JSRuntime.InvokeVoidAsync("window.location.reload");
            }
            else
            {
                if (!string.IsNullOrEmpty(_pendingNavigation) && string.IsNullOrEmpty(destination))
                {
                    destination = _pendingNavigation;
                }

                NavigationManager.NavigateTo(destination);
            }
        }
        catch (Exception ex)
        {
            GameService.LogMessage(string.Format(WebConstants.NavigationErrorMessage, ex.Message));
        }
    }

    private async Task SetBeforeUnloadWarning(bool enabled)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.setBeforeUnloadWarning", enabled);
        }
        catch
        {
        }
    }

    private async Task StartNewGame()
    {
        var renderer = GameRenderer.CreateRenderer(GameService.LogMessage);
        GameService.StartNewGame(renderer);
        GameService.StartTimer();
        GameService.LogMessage(WebConstants.GameStartedMessage);

        await SetBeforeUnloadWarning(true);
    }

    private void StopGame()
    {
        GameService.StopGame();
        GameService.LogMessage(WebConstants.GameStoppedMessage);
    }

    private void TogglePause()
    {
        GameService.TogglePause();
        GameService.LogMessage(GameService.IsPaused ? WebConstants.GamePausedMessage : WebConstants.GameResumedMessage);
    }

    private void SpawnAntelope()
    {
        GameService.SpawnAntelope();
    }

    private void SpawnLion()
    {
        GameService.SpawnLion();
    }

    private void ToggleDisplayMode()
    {
        GameService.ToggleDisplayMode();
    }

    private void ToggleSavePanel()
    {
        _showSavePanel = !_showSavePanel;
        _saveName = string.Empty;
        _saveErrorMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ToggleLoadPanel()
    {
        if (_showLoadPanel)
        {
            _showLoadPanel = false;
            StateHasChanged();
            return;
        }

        _showLoadPanel = true;
        _loadErrorMessage = string.Empty;
        _isLoadingGames = true;
        StateHasChanged();

        try
        {
            var saves = await GameSaveService.GetSavesForUserAsync(_userId);
            _gameSaves = saves.Select(s => new GameSaveViewModel
            {
                Id = s.Id,
                Name = s.Name,
                CreatedAt = s.CreatedAt
            }).ToList();

            _isLoadingGames = false;
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Failed to load saved games: " + ex.Message;
            _isLoadingGames = false;
        }

        StateHasChanged();
    }

    private async Task SaveGame()
    {
        if (string.IsNullOrWhiteSpace(_saveName))
        {
            _saveErrorMessage = "Please enter a name for your save";
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            string gameStateJson = GameService.SerializeGameState();
            await GameSaveService.CreateSaveAsync(_saveName, gameStateJson, _userId);

            _isSaving = false;
            _showSavePanel = false;
            GameService.LogMessage(WebConstants.SaveGameSuccessMessage);
        }
        catch (Exception ex)
        {
            _saveErrorMessage = "Error saving game: " + ex.Message;
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task LoadGame(int saveId)
    {
        try
        {
            var save = await GameSaveService.GetSaveByIdAsync(saveId);
            if (save == null)
            {
                _loadErrorMessage = "Save not found";
                return;
            }

            var renderer = GameRenderer.CreateRenderer(GameService.LogMessage);
            GameService.LoadGameState(save.GameStateJson, renderer);
            GameService.LogMessage(WebConstants.LoadGameSuccessMessage);
            GameService.StartTimer();

            _showLoadPanel = false;
            await SetBeforeUnloadWarning(true);
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Error loading game: " + ex.Message;
            StateHasChanged();
        }
    }

    private async Task DeleteSave(int saveId)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this save?");
            if (!confirmed)
                return;

            await GameSaveService.DeleteSaveAsync(saveId, _userId);

            var saves = await GameSaveService.GetSavesForUserAsync(_userId);
            _gameSaves = saves.Select(s => new GameSaveViewModel
            {
                Id = s.Id,
                Name = s.Name,
                CreatedAt = s.CreatedAt
            }).ToList();

            StateHasChanged();
            GameService.LogMessage("Game save deleted");
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Error deleting save: " + ex.Message;
            StateHasChanged();
        }
    }

    private string GetAnimalClass(string animalName)
    {
        return animalName.ToLower();
    }

    private string GetAnimalDisplay(string animalName)
    {
        return animalName switch
        {
            GameConstants.LionName => GameConstants.LionSymbol,
            GameConstants.AntelopeName => GameConstants.AntelopeSymbol,
            GameConstants.CaracalName => GameConstants.CaracalSymbol,
            _ => GameConstants.UnknownAnimalSymbol
        };
    }

    private void SelectAnimal(IAnimal animal)
    {
        _selectedAnimal = animal;
        GameService.SelectAnimalAt(animal.Position.X, animal.Position.Y);
    }

    private void DeselectAnimal()
    {
        GameService.DeselectAnimal();
        selectedAnimalDetails = null;
        _selectedAnimal = null;
        _detailsUpdateTimer?.Stop();
        InvokeAsync(StateHasChanged);
    }

    private string GetHealthColorClass(AnimalDetailViewModel animal) => animal.HealthPercentage switch
    {
        <= GameConstants.LowHealthThreshold => "bg-danger",
        <= GameConstants.MediumHealthThreshold => "bg-warning",
        _ => "bg-success"
    };

    public void Dispose()
    {
        GameService.GameStateChanged -= OnGameStateChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
        GameService.AnimalSelectionChanged -= OnAnimalSelectionChanged;

        // Clean up timer
        if (_detailsUpdateTimer != null)
        {
            _detailsUpdateTimer.Elapsed -= UpdateSelectedAnimalDetails;
            _detailsUpdateTimer.Stop();
            _detailsUpdateTimer.Dispose();
            _detailsUpdateTimer = null;
        }
    }
}