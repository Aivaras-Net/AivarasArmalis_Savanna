@page "/game"
@using Savanna.Core
@using Savanna.Domain
@using Savanna.Domain.Interfaces
@using Savanna.Core.Constants
@using Savanna.Web.Constants
@using System.Timers
@using Microsoft.JSInterop
@using Microsoft.JSInterop.Infrastructure
@using Savanna.Core.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Savanna.Web.Services.Interfaces
@using Savanna.Web.Models
@using System.Text.Json
@using Savanna.Web.Components.Game
@using Savanna.Web.Components.Shared
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IGameService GameService
@inject IGameRenderer GameRenderer
@inject IGameSaveService GameSaveService
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Savanna Game</PageTitle>

<div class="game-container">
    <GameHeader IsGameRunning="GameService.IsGameRunning" IsPaused="GameService.IsPaused"
        AnimalsCount="GameService.GameEngine?.Animals.Count ?? 0"
        LionsCount="GameService.GameEngine?.Animals.Count(a => a.Name == GameConstants.LionName) ?? 0"
        AntelopesCount="GameService.GameEngine?.Animals.Count(a => a.Name == GameConstants.AntelopeName) ?? 0" />

    @if (!GameService.IsGameRunning)
    {
        <WelcomePanel OnStartNewGame="StartNewGame" />
    }
    else
    {
        <div class="game-dashboard">
            <GameControls IsPaused="GameService.IsPaused" UseLetterDisplay="GameService.UseLetterDisplay"
                OnTogglePause="TogglePause" OnStopGame="StopGame" OnSpawnAntelope="SpawnAntelope" OnSpawnLion="SpawnLion"
                OnToggleDisplayMode="ToggleDisplayMode" OnToggleSavePanel="ToggleSavePanel"
                OnToggleLoadPanel="ToggleLoadPanel" />

            @if (_showSavePanel)
            {
                <SaveGamePanel SaveName="@_saveName" SaveNameChanged="value => _saveName = value"
                    SaveErrorMessage="@_saveErrorMessage" SaveSuccessMessage="@_saveSuccessMessage" IsSaving="@_isSaving"
                    OnSaveGame="SaveGame" OnToggleSavePanel="ToggleSavePanel" />
            }

            @if (_showLoadPanel)
            {
                <LoadGamePanel GameSaves="@_gameSaves" LoadErrorMessage="@_loadErrorMessage" IsLoadingGames="@_isLoadingGames"
                    OnToggleLoadPanel="ToggleLoadPanel" OnLoadGame="LoadGame" OnDeleteSave="DeleteSave" />
            }

            <div class="game-content">
                <GameField GameEngine="GameService.GameEngine" FieldWidth="GameService.FieldWidth"
                    FieldHeight="GameService.FieldHeight" UseLetterDisplay="GameService.UseLetterDisplay"
                    OnSelectAnimal="SelectAnimal" />

                <div class="sidebar-container">
                    @if (selectedAnimalDetails != null)
                    {
                        <AnimalDetailsPanel AnimalDetails="selectedAnimalDetails" OnDeselectAnimal="DeselectAnimal"
                            OnKillAnimal="KillSelectedAnimal" OnMakeOffspring="MakeOffspring" />
                    }

                    <GameLogPanel GameLogs="GameService.GameLogs" />
                </div>
            </div>
        </div>
    }
</div>

<NavigationWarningModal @ref="_navigationWarningModal" OnCancelNavigation="CancelNavigation"
    OnConfirmNavigation="ConfirmNavigation" />

@if (_showDeleteConfirmation)
{
    <DeleteConfirmationModal Message="Are you sure you want to delete this save game? This action cannot be undone."
        ItemName="@_pendingSaveName" ErrorMessage="@_deleteErrorMessage" OnCancel="CancelDeleteSave"
        OnConfirm="ConfirmDeleteSave" />
}

<style>
    .game-container {
        background-color: var(--savanna-sand-light);
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 0.75rem;
        margin-bottom: 0;
        max-width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .game-dashboard {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        flex: 1;
        min-height: 0;
        overflow: hidden;
    }

    .game-content {
        display: grid;
        grid-template-columns: 1fr 280px;
        gap: 0.75rem;
        flex: 1;
        min-height: 0;
        overflow: hidden;
    }

    .sidebar-container {
        display: grid;
        grid-template-rows: auto 1fr;
        gap: 0.75rem;
        max-height: 100%;
        overflow: hidden;
    }

    @@media only screen and (max-width: 992px) {
        .game-content {
            grid-template-columns: 1fr;
        }

        .sidebar-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
        }

        .game-field-container {
            min-height: 50vh;
        }
    }

    @@media only screen and (max-width: 768px) {
        .sidebar-container {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private string _pendingNavigation = null;
    private NavigationWarningModal _navigationWarningModal;
    private AnimalDetailViewModel? selectedAnimalDetails;
    private IAnimal? _selectedAnimal;
    private System.Timers.Timer? _detailsUpdateTimer;
    private string _saveName = string.Empty;
    private string _saveErrorMessage = string.Empty;
    private string _saveSuccessMessage = string.Empty;
    private string _loadErrorMessage = string.Empty;
    private bool _isSaving = false;
    private bool _isLoadingGames = false;
    private List<GameSaveViewModel> _gameSaves = new();
    private string _userId = string.Empty;
    private bool _showSavePanel = false;
    private bool _showLoadPanel = false;
    private bool _showDeleteConfirmation = false;
    private string _deleteErrorMessage = string.Empty;
    private int _pendingDeleteSaveId = -1;
    private string _pendingSaveName = string.Empty;

    [JSInvokable]
    public static Task HandleNavigationAttempt(string destination)
    {
        return _instance?.HandleNavigation(destination) ?? Task.CompletedTask;
    }

    private static Game? _instance;

    private async Task HandleNavigation(string destination)
    {
        if (GameService.IsGameRunning)
        {
            _pendingNavigation = destination;
            await ShowNavigationWarningModal();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _instance = this;

        GameService.GameStateChanged += OnGameStateChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        GameService.AnimalSelectionChanged += OnAnimalSelectionChanged;

        _detailsUpdateTimer = new System.Timers.Timer(WebConstants.AnimalDetailsUpdateInterval);
        _detailsUpdateTimer.Elapsed += UpdateSelectedAnimalDetails;
        _detailsUpdateTimer.AutoReset = true;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("window.setupGame");

                if (GameService.IsGameRunning)
                {
                    await SetBeforeUnloadWarning(true);
                }
            }
            catch (Exception ex)
            {
                GameService.LogMessage(string.Format(WebConstants.JavaScriptInitializationErrorMessage, ex.Message));
            }
        }
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (GameService.IsGameRunning && !e.Location.EndsWith("/game"))
        {
            _pendingNavigation = e.Location;
            _ = ShowNavigationWarningModal();
        }
    }

    private void OnGameStateChanged(object sender, EventArgs e)
    {
        if (_selectedAnimal != null && _selectedAnimal.isAlive)
        {
            RefreshSelectedAnimalDetails();
        }
        else if (_selectedAnimal != null && !_selectedAnimal.isAlive)
        {
            DeselectAnimal();
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnAnimalSelectionChanged(object? sender, AnimalDetailViewModel? animal)
    {
        selectedAnimalDetails = animal;

        if (animal != null)
        {
            _selectedAnimal = GameService.GameEngine?.Animals.FirstOrDefault(a => a.Id == animal.Id);

            _detailsUpdateTimer?.Start();
        }
        else
        {
            _detailsUpdateTimer?.Stop();
            _selectedAnimal = null;
        }

        InvokeAsync(StateHasChanged);
    }

    private void UpdateSelectedAnimalDetails(object? sender, ElapsedEventArgs e)
    {
        if (_selectedAnimal != null && _selectedAnimal.isAlive && GameService.IsGameRunning && !GameService.IsPaused)
        {
            RefreshSelectedAnimalDetails();
        }
    }

    private void RefreshSelectedAnimalDetails()
    {
        if (_selectedAnimal != null && GameService.GameEngine != null)
        {
            var animal = GameService.GameEngine.Animals.FirstOrDefault(a => a.Id == _selectedAnimal.Id);

            if (animal != null && animal.isAlive)
            {
                selectedAnimalDetails = AnimalDetailViewModel.FromAnimal(animal);
                InvokeAsync(StateHasChanged);
            }
            else
            {
                DeselectAnimal();
            }
        }
    }

    private async Task ShowNavigationWarningModal()
    {
        if (_navigationWarningModal != null)
        {
            try
            {
                await _navigationWarningModal.ShowModal();
            }
            catch (Exception ex)
            {
                GameService.LogMessage($"Error showing navigation warning modal: {ex.Message}");

                await JSRuntime.InvokeVoidAsync("window.showNavigationWarningModal");
            }
        }
    }

    private async void CancelNavigation()
    {
        _pendingNavigation = null;
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.HideModal();
        }
    }

    private async void ConfirmNavigation()
    {
        if (_navigationWarningModal != null)
        {
            await _navigationWarningModal.HideModal();
        }

        await SetBeforeUnloadWarning(false);

        try
        {
            string destination = await JSRuntime.InvokeAsync<string>("window.getAndClearPendingNavigation");

            GameService.LogMessage(string.Format(WebConstants.NavigatingToMessage, destination));
            GameService.StopTimer();

            if (string.IsNullOrEmpty(destination) && !string.IsNullOrEmpty(_pendingNavigation))
            {
                destination = _pendingNavigation;
            }

            if (NavigationManager.Uri == destination)
            {
                await JSRuntime.InvokeVoidAsync("window.location.reload");
            }
            else
            {
                NavigationManager.NavigateTo(destination, forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            GameService.LogMessage(string.Format(WebConstants.NavigationErrorMessage, ex.Message));
        }
    }

    private async Task SetBeforeUnloadWarning(bool enabled)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.setBeforeUnloadWarning", enabled);
        }
        catch (Exception ex)
        {
            GameService.LogMessage($"Error setting beforeunload warning: {ex.Message}");
        }
    }

    private async Task StartNewGame()
    {
        var renderer = GameRenderer.CreateRenderer(GameService.LogMessage);
        GameService.StartNewGame(renderer);
        GameService.StartTimer();
        GameService.LogMessage(WebConstants.GameStartedMessage);

        await SetBeforeUnloadWarning(true);
    }

    private async void StopGame()
    {
        GameService.StopGame();
        GameService.LogMessage(WebConstants.GameStoppedMessage);

        await SetBeforeUnloadWarning(false);
    }

    private void TogglePause()
    {
        GameService.TogglePause();
        GameService.LogMessage(GameService.IsPaused ? WebConstants.GamePausedMessage : WebConstants.GameResumedMessage);
    }

    private void SpawnAntelope()
    {
        GameService.SpawnAntelope();
    }

    private void SpawnLion()
    {
        GameService.SpawnLion();
    }

    private void ToggleDisplayMode()
    {
        GameService.ToggleDisplayMode();
    }

    private void ToggleSavePanel()
    {
        _showSavePanel = !_showSavePanel;
        _saveName = string.Empty;
        _saveErrorMessage = string.Empty;
        _saveSuccessMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ToggleLoadPanel()
    {
        if (_showLoadPanel)
        {
            _showLoadPanel = false;
            StateHasChanged();
            return;
        }

        _showLoadPanel = true;
        _loadErrorMessage = string.Empty;
        _isLoadingGames = true;
        StateHasChanged();

        try
        {
            var saves = await GameSaveService.GetSavesForUserAsync(_userId);
            _gameSaves = new List<GameSaveViewModel>();

            foreach (var save in saves)
            {
                try
                {
                    _gameSaves.Add(ExtractGameInfo(save));
                }
                catch
                {
                    _gameSaves.Add(new GameSaveViewModel
                    {
                        Id = save.Id,
                        Name = save.Name,
                        CreatedAt = save.CreatedAt
                    });
                }
            }

            _gameSaves = _gameSaves.OrderByDescending(s => s.CreatedAt).ToList();
            _isLoadingGames = false;
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Failed to load saved games: " + ex.Message;
            _isLoadingGames = false;
        }

        StateHasChanged();
    }

    private GameSaveViewModel ExtractGameInfo(GameSave save)
    {
        var viewModel = new GameSaveViewModel
        {
            Id = save.Id,
            Name = save.Name,
            CreatedAt = save.CreatedAt
        };

        try
        {
            if (!string.IsNullOrEmpty(save.GameStateJson))
            {
                var gameState = JsonSerializer.Deserialize<GameState>(save.GameStateJson);
                if (gameState != null)
                {
                    viewModel.LionCount = gameState.Animals.Count(a => a.Type == GameConstants.LionName);
                    viewModel.AntelopeCount = gameState.Animals.Count(a => a.Type == GameConstants.AntelopeName);

                    viewModel.TotalAnimals = gameState.Animals.Count;

                    viewModel.IterationCount = gameState.Animals.Any() ? gameState.Animals.Max(a => a.Age) : 0;
                }
            }
        }
        catch
        {
        }

        return viewModel;
    }

    private async Task SaveGame()
    {
        if (string.IsNullOrWhiteSpace(_saveName))
        {
            _saveErrorMessage = "Please enter a name for your save";
            _saveSuccessMessage = string.Empty;
            StateHasChanged();
            return;
        }

        try
        {
            _isSaving = true;
            _saveErrorMessage = string.Empty;
            _saveSuccessMessage = string.Empty;
            StateHasChanged();

            string gameStateJson = GameService.SerializeGameState();
            await GameSaveService.CreateSaveAsync(_saveName, gameStateJson, _userId);

            _isSaving = false;
            _saveSuccessMessage = "Game saved successfully!";
            GameService.LogMessage(WebConstants.SaveGameSuccessMessage);
            StateHasChanged();

            // Auto-hide the success message after 3 seconds
            await Task.Delay(3000);
            _showSavePanel = false;
            _saveName = string.Empty;
            _saveSuccessMessage = string.Empty;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _saveErrorMessage = "Error saving game: " + ex.Message;
            _saveSuccessMessage = string.Empty;
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task LoadGame(int saveId)
    {
        try
        {
            var save = await GameSaveService.GetSaveByIdAsync(saveId);
            if (save == null)
            {
                _loadErrorMessage = "Save not found";
                return;
            }

            var renderer = GameRenderer.CreateRenderer(GameService.LogMessage);
            GameService.LoadGameState(save.GameStateJson, renderer);
            GameService.LogMessage(WebConstants.LoadGameSuccessMessage);
            GameService.StartTimer();

            _showLoadPanel = false;
            await SetBeforeUnloadWarning(true);
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Error loading game: " + ex.Message;
            StateHasChanged();
        }
    }

    private async Task DeleteSave(int saveId)
    {
        var saveToDelete = _gameSaves.FirstOrDefault(s => s.Id == saveId);
        if (saveToDelete != null)
        {
            _pendingDeleteSaveId = saveId;
            _pendingSaveName = saveToDelete.Name;
            _showDeleteConfirmation = true;
            _deleteErrorMessage = string.Empty;
            StateHasChanged();
        }
    }

    private void CancelDeleteSave()
    {
        _showDeleteConfirmation = false;
        _pendingDeleteSaveId = -1;
        _pendingSaveName = string.Empty;
        StateHasChanged();
    }

    private async Task ConfirmDeleteSave()
    {
        try
        {
            _showDeleteConfirmation = false;
            int saveId = _pendingDeleteSaveId;
            string saveName = _pendingSaveName;
            _pendingDeleteSaveId = -1;
            _pendingSaveName = string.Empty;

            if (saveId < 0)
                return;

            await GameSaveService.DeleteSaveAsync(saveId, _userId);

            var saves = await GameSaveService.GetSavesForUserAsync(_userId);
            _gameSaves = new List<GameSaveViewModel>();

            foreach (var save in saves)
            {
                try
                {
                    _gameSaves.Add(ExtractGameInfo(save));
                }
                catch
                {
                    _gameSaves.Add(new GameSaveViewModel
                    {
                        Id = save.Id,
                        Name = save.Name,
                        CreatedAt = save.CreatedAt
                    });
                }
            }

            _gameSaves = _gameSaves.OrderByDescending(s => s.CreatedAt).ToList();

            StateHasChanged();
            GameService.LogMessage($"Game save '{saveName}' deleted");
        }
        catch (Exception ex)
        {
            _loadErrorMessage = "Error deleting save: " + ex.Message;
            StateHasChanged();
        }
    }

    private string GetAnimalClass(string animalName)
    {
        return animalName.ToLower();
    }

    private string GetAnimalDisplay(string animalName)
    {
        return animalName switch
        {
            GameConstants.LionName => GameConstants.LionSymbol,
            GameConstants.AntelopeName => GameConstants.AntelopeSymbol,
            GameConstants.CaracalName => GameConstants.CaracalSymbol,
            _ => GameConstants.UnknownAnimalSymbol
        };
    }

    private void SelectAnimal(IAnimal animal)
    {
        _selectedAnimal = animal;
        GameService.SelectAnimalAt(animal.Position.X, animal.Position.Y);
    }

    private void DeselectAnimal()
    {
        GameService.DeselectAnimal();
        selectedAnimalDetails = null;
        _selectedAnimal = null;
        _detailsUpdateTimer?.Stop();
        InvokeAsync(StateHasChanged);
    }

    private string GetHealthColorClass(AnimalDetailViewModel animal) => animal.HealthPercentage switch
    {
        <= GameConstants.LowHealthThreshold => "bg-danger",
        <= GameConstants.MediumHealthThreshold => "bg-warning",
        _ => "bg-success"
    };

    private void KillSelectedAnimal()
    {
        if (_selectedAnimal != null && GameService.GameEngine != null)
        {
            var animal = GameService.GameEngine.Animals.FirstOrDefault(a => a.Id == _selectedAnimal.Id);

            if (animal != null)
            {
                GameService.LogMessage($"{animal.Name} was manually removed from the simulation.");

                animal.Health = 0;

                DeselectAnimal();
            }
        }
    }

    private void MakeOffspring()
    {
        if (_selectedAnimal != null && GameService.GameEngine != null)
        {
            var parentAnimal = GameService.GameEngine.Animals.FirstOrDefault(a => a.Id == _selectedAnimal.Id);

            if (parentAnimal != null)
            {
                var offspring = parentAnimal.CreateOffspring(parentAnimal.Position);

                GameService.GameEngine.AddAnimal(offspring);

                GameService.LogMessage($"New {parentAnimal.Name} offspring was manually created.");

                RefreshSelectedAnimalDetails();
            }
        }
    }

    public void Dispose()
    {
        // Reset static instance reference when component is disposed
        if (_instance == this)
        {
            _instance = null;
        }

        GameService.GameStateChanged -= OnGameStateChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
        GameService.AnimalSelectionChanged -= OnAnimalSelectionChanged;

        if (_detailsUpdateTimer != null)
        {
            _detailsUpdateTimer.Elapsed -= UpdateSelectedAnimalDetails;
            _detailsUpdateTimer.Stop();
            _detailsUpdateTimer.Dispose();
            _detailsUpdateTimer = null;
        }

        try
        {
            if (GameService.IsGameRunning)
            {
                JSRuntime.InvokeVoidAsync("window.setBeforeUnloadWarning", false);
            }
        }
        catch
        {
        }
    }
}