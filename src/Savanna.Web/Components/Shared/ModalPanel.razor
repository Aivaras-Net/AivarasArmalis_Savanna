@namespace Savanna.Web.Components.Shared

<div class="modal-overlay" @onclick:stopPropagation>
    <div class="modal-panel">
        <div class="modal-header">
            <h3>@Title</h3>
            <button type="button" class="btn-close" @onclick="OnClose"></button>
        </div>
        <div class="modal-body">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    @ErrorMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    @SuccessMessage
                </div>
            }
            @ChildContent
        </div>
    </div>
</div>

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-panel {
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        width: 100%;
        max-width: 450px;
        animation: fadeIn 0.3s;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }

    .modal-header h3 {
        margin: 0;
        font-size: 1.25rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

@code {
    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string ErrorMessage { get; set; } = string.Empty;

    [Parameter]
    public string SuccessMessage { get; set; } = string.Empty;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;
}